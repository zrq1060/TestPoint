plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.hilt)
    id 'kotlin-kapt'
    alias(libs.plugins.ksp)
}

kapt {
    arguments {
        arg("TEST_MODULE_NAME", project.getName())
    }
}
ksp {
    arg("TEST_MODULE_NAME", project.getName())
}
android {
    signingConfigs {
        config {
            storeFile file('test.jks')
            storePassword '123456'
            keyAlias 'test'
            keyPassword '123456'
        }
    }
    namespace 'com.zrq.test.point.demo'
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "com.zrq.test.point.demo"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode libs.versions.versionCode.get().toInteger()
        versionName libs.versions.versionName.get().toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "test_list_label", "Test App Name"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility libs.versions.javaVersion.get().toString()
        targetCompatibility libs.versions.javaVersion.get().toString()
    }
    kotlinOptions {
        jvmTarget = libs.versions.JavaVersion.get().toString()
    }
}

dependencies {
    implementation libs.kotlin.stdlib
    implementation libs.appcompat
    implementation libs.material

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
    // module
    implementation project(':module-java')
    implementation project(':module-kotlin')
    // test point
    if (isDependenciesLocalProject.toBoolean()) {
        implementation project(':test-point-annotation')
        debugImplementation project(':test-point-api')
        if (isUseKsp.toBoolean()) kspDebug project(':test-point-ksp') else kaptDebug project(':test-point-compiler')
    } else {
        implementation libs.test.point.annotation
        debugImplementation libs.test.point.api
        if (isUseKsp.toBoolean()) kspDebug libs.test.point.ksp else kaptDebug libs.test.point.compiler
    }
    // hilt，添加此为了测试注解处理器和Hilt冲突。
    // 推荐使用ksp，不和hilt冲突（使用kapt、ksp引用hilt都不会冲突），但是ksp目前仅不支持包级函数-静态方法，例子：com.zrq.test.point.demo.kotlin.Test.test2()
    // 使用kapt，和hilt冲突（使用kapt、ksp引用hilt都会冲突），但是kapt支持全部使用。
    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)
}